"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

const extensions = {};

extensions.receiveAsyncResponse = async function receiveAsyncResponse(status, value) {
  _logger.default.debug(`Received async response: ${JSON.stringify(value)}`);

  if (!_appiumSupport.util.hasValue(this.asyncPromise)) {
    _logger.default.warn(`Received async response when we were not expecting one! ` + `Response was: ${JSON.stringify(value)}`);

    return;
  }

  if (_appiumSupport.util.hasValue(status) && status !== 0) {
    return this.asyncPromise.reject((0, _appiumBaseDriver.errorFromCode)(status, value.message));
  }

  if (!_appiumSupport.util.hasValue(status) && value && _lodash.default.isString(value.error)) {
    return this.asyncPromise.reject((0, _appiumBaseDriver.errorFromW3CJsonCode)(value.error, value.message, value.stacktrace));
  }

  return this.asyncPromise.resolve(value);
};

extensions.execute = async function execute(script, args) {
  if (script.match(/^mobile:/)) {
    script = script.replace(/^mobile:/, '').trim();
    return await this.executeMobile(script, _lodash.default.isArray(args) ? args[0] : args);
  } else if (this.isWebContext()) {
    args = this.convertElementsForAtoms(args);
    const result = await this.executeAtom('execute_script', [script, args]);
    return this.cacheWebElements(result);
  } else {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }
};

extensions.executeAsync = async function executeAsync(script, args) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  args = this.convertElementsForAtoms(args);
  this.asyncWaitMs = this.asyncWaitMs || 0;
  const promise = this.remote.executeAtomAsync('execute_async_script', [script, args, this.asyncWaitMs], this.curWebFrames);
  return await this.waitForAtom(promise);
};

extensions.executeMobile = async function executeMobile(mobileCommand, opts = {}) {
  const commandMap = {
    tap: 'mobileTap',
    scroll: 'mobileScroll',
    selectPickerWheelValue: 'mobileSelectPickerWheelValue',
    swipe: 'mobileSwipe',
    pinch: 'mobilePinch',
    doubleTap: 'mobileDoubleTap',
    twoFingerTap: 'mobileTwoFingerTap',
    tapWithNumberOfTaps: 'mobileTapWithNumberOfTaps',
    touchAndHold: 'mobileTouchAndHold',
    dragFromToForDuration: 'mobileDragFromToForDuration',
    rotateElement: 'mobileRotateElement',
    alert: 'mobileHandleAlert',
    setPasteboard: 'mobileSetPasteboard',
    getPasteboard: 'mobileGetPasteboard',
    source: 'mobileGetSource',
    getContexts: 'mobileGetContexts',
    installApp: 'mobileInstallApp',
    isAppInstalled: 'mobileIsAppInstalled',
    removeApp: 'mobileRemoveApp',
    launchApp: 'mobileLaunchApp',
    terminateApp: 'mobileTerminateApp',
    queryAppState: 'mobileQueryAppState',
    activateApp: 'mobileActivateApp',
    listApps: 'mobileListApps',
    viewportScreenshot: 'getViewportScreenshot',
    viewportRect: 'getViewportRect',
    startPerfRecord: 'mobileStartPerfRecord',
    stopPerfRecord: 'mobileStopPerfRecord',
    installCertificate: 'mobileInstallCertificate',
    startLogsBroadcast: 'mobileStartLogsBroadcast',
    stopLogsBroadcast: 'mobileStopLogsBroadcast',
    batteryInfo: 'mobileGetBatteryInfo',
    deviceInfo: 'mobileGetDeviceInfo',
    getDeviceTime: 'mobileGetDeviceTime',
    activeAppInfo: 'mobileGetActiveAppInfo',
    deviceScreenInfo: 'getScreenInfo',
    pressButton: 'mobilePressButton',
    enrollBiometric: 'mobileEnrollBiometric',
    sendBiometricMatch: 'mobileSendBiometricMatch',
    isBiometricEnrolled: 'mobileIsBiometricEnrolled',
    clearKeychains: 'mobileClearKeychains',
    getPermission: 'mobileGetPermission',
    setPermission: 'mobileSetPermissions',
    resetPermission: 'mobileResetPermission',
    getAppearance: 'mobileGetAppearance',
    setAppearance: 'mobileSetAppearance',
    siriCommand: 'mobileSiriCommand',
    deleteFile: 'mobileDeleteFile',
    deleteFolder: 'mobileDeleteFolder',
    startAudioRecording: 'startAudioRecording',
    stopAudioRecording: 'stopAudioRecording',
    runXCTest: 'mobileRunXCTest',
    installXCTestBundle: 'mobileInstallXCTestBundle',
    listXCTestBundles: 'mobileListXCTestBundles',
    listXCTestsInTestBundle: 'mobileListXCTestsInTestBundle',
    pushNotification: 'mobilePushNotification',
    expectNotification: 'mobileExpectNotification',
    performIoHidEvent: 'mobilePerformIoHidEvent',
    configureLocalization: 'mobileConfigureLocalization',
    resetLocationService: 'mobileResetLocationService',
    startPcap: 'mobileStartPcap',
    stopPcap: 'mobileStopPcap'
  };

  if (!_lodash.default.has(commandMap, mobileCommand)) {
    throw new _appiumBaseDriver.errors.UnknownCommandError(`Unknown mobile command '${mobileCommand}'. Only ${_lodash.default.keys(commandMap).join(', ')} commands are supported.`);
  }

  return await this[commandMap[mobileCommand]](opts);
};

var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
