"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _pyIosDeviceClient = _interopRequireDefault(require("../py-ios-device-client"));

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _utils = require("../utils");

const MAX_CAPTURE_TIME_SEC = 60 * 60 * 12;
const DEFAULT_CAPTURE_TIME_SEC = 60 * 5;
const DEFAULT_EXT = '.pcap';

const pcapLogger = _appiumSupport.logger.getLogger('pcapd');

const commands = {};
exports.commands = commands;

class TrafficCapture {
  constructor(udid, resultPath) {
    this.udid = udid;
    this.resultPath = resultPath;
    this.mainProcess = null;
  }

  async start(timeoutSeconds) {
    this.mainProcess = await new _pyIosDeviceClient.default(this.udid).collectPcap(this.resultPath);
    this.mainProcess.on('output', (stdout, stderr) => {
      if (stderr) {
        pcapLogger.info(`${stderr}`);
      }
    });

    _logger.default.info(`Starting network traffic capture session on the device '${this.udid}'. ` + `Will timeout in ${timeoutSeconds}s`);

    setTimeout(async () => await this.interrupt(), timeoutSeconds * 1000);
    this.mainProcess.once('exit', (code, signal) => {
      _logger.default.debug(`The traffic capture session on the device '${this.udid}' has exited ` + `with code ${code}, signal ${signal}`);
    });
  }

  isCapturing() {
    var _this$mainProcess;

    return !!((_this$mainProcess = this.mainProcess) !== null && _this$mainProcess !== void 0 && _this$mainProcess.isRunning);
  }

  async interrupt(force = false) {
    if (this.isCapturing()) {
      const interruptPromise = this.mainProcess.stop(force ? 'SIGTERM' : 'SIGINT');
      this.mainProcess = null;

      try {
        await interruptPromise;
      } catch (e) {
        _logger.default.warn(`Cannot ${force ? 'terminate' : 'interrupt'} the traffic capture session. ` + `Original error: ${e.message}`);

        return false;
      }
    }

    return true;
  }

  async finish() {
    await this.interrupt();
    return this.resultPath;
  }

  async cleanup() {
    if (await _appiumSupport.fs.exists(this.resultPath)) {
      await _appiumSupport.fs.rimraf(this.resultPath);
    }
  }

}

commands.mobileStartPcap = async function mobileStartPcap(options = {}) {
  var _this$_trafficCapture;

  if (this.isSimulator()) {
    _logger.default.errorAndThrow('Network traffic capture only works on real devices');
  }

  const {
    timeLimitSec = DEFAULT_CAPTURE_TIME_SEC,
    forceRestart
  } = options;

  if ((_this$_trafficCapture = this._trafficCapture) !== null && _this$_trafficCapture !== void 0 && _this$_trafficCapture.isCapturing()) {
    _logger.default.info(`There is an active traffic capture process`);

    if (forceRestart) {
      _logger.default.info(`Stopping it because 'forceRestart' option is set to true`);

      await this._trafficCapture.interrupt(true);
    } else {
      _logger.default.info(`Doing nothing. ` + `Set 'forceRestart' option to true if you'd like to start a new traffic capture session`);

      return;
    }
  }

  if (this._trafficCapture) {
    await this._trafficCapture.cleanup();
    this._trafficCapture = null;
  }

  const resultPath = await _appiumSupport.tempDir.path({
    prefix: `appium_${_appiumSupport.util.uuidV4().substring(0, 8)}`,
    suffix: DEFAULT_EXT
  });
  const trafficCollector = new TrafficCapture(this.opts.device.udid, resultPath);
  const timeoutSeconds = parseInt(timeLimitSec, 10);

  if (isNaN(timeoutSeconds) || timeoutSeconds > MAX_CAPTURE_TIME_SEC || timeoutSeconds <= 0) {
    _logger.default.errorAndThrow(`The timeLimitSec value must be in range [1, ${MAX_CAPTURE_TIME_SEC}] seconds. ` + `The value of '${timeLimitSec}' has been passed instead.`);
  }

  try {
    await trafficCollector.start(timeoutSeconds);
  } catch (e) {
    await trafficCollector.interrupt(true);
    await trafficCollector.cleanup();
    throw e;
  }

  this._trafficCapture = trafficCollector;
};

commands.mobileStopPcap = async function mobileStopPcap() {
  if (!this._trafficCapture) {
    _logger.default.info('Network traffic collector has not been started. There is nothing to stop');

    return '';
  }

  let resultPath;

  try {
    resultPath = await this._trafficCapture.finish();

    if (!(await _appiumSupport.fs.exists(resultPath))) {
      _logger.default.errorAndThrow(`The network traffic capture utility has failed ` + `to store the actual traffic capture at '${resultPath}'`);
    }
  } catch (e) {
    await this._trafficCapture.interrupt(true);
    await this._trafficCapture.cleanup();
    this._trafficCapture = null;
    throw e;
  }

  return await (0, _utils.encodeBase64OrUpload)(resultPath);
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9wY2FwLmpzIl0sIm5hbWVzIjpbIk1BWF9DQVBUVVJFX1RJTUVfU0VDIiwiREVGQVVMVF9DQVBUVVJFX1RJTUVfU0VDIiwiREVGQVVMVF9FWFQiLCJwY2FwTG9nZ2VyIiwibG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiY29tbWFuZHMiLCJUcmFmZmljQ2FwdHVyZSIsImNvbnN0cnVjdG9yIiwidWRpZCIsInJlc3VsdFBhdGgiLCJtYWluUHJvY2VzcyIsInN0YXJ0IiwidGltZW91dFNlY29uZHMiLCJQeWlkZXZpY2UiLCJjb2xsZWN0UGNhcCIsIm9uIiwic3Rkb3V0Iiwic3RkZXJyIiwiaW5mbyIsImxvZyIsInNldFRpbWVvdXQiLCJpbnRlcnJ1cHQiLCJvbmNlIiwiY29kZSIsInNpZ25hbCIsImRlYnVnIiwiaXNDYXB0dXJpbmciLCJpc1J1bm5pbmciLCJmb3JjZSIsImludGVycnVwdFByb21pc2UiLCJzdG9wIiwiZSIsIndhcm4iLCJtZXNzYWdlIiwiZmluaXNoIiwiY2xlYW51cCIsImZzIiwiZXhpc3RzIiwicmltcmFmIiwibW9iaWxlU3RhcnRQY2FwIiwib3B0aW9ucyIsImlzU2ltdWxhdG9yIiwiZXJyb3JBbmRUaHJvdyIsInRpbWVMaW1pdFNlYyIsImZvcmNlUmVzdGFydCIsIl90cmFmZmljQ2FwdHVyZSIsInRlbXBEaXIiLCJwYXRoIiwicHJlZml4IiwidXRpbCIsInV1aWRWNCIsInN1YnN0cmluZyIsInN1ZmZpeCIsInRyYWZmaWNDb2xsZWN0b3IiLCJvcHRzIiwiZGV2aWNlIiwicGFyc2VJbnQiLCJpc05hTiIsIm1vYmlsZVN0b3BQY2FwIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLG9CQUFvQixHQUFHLEtBQUssRUFBTCxHQUFVLEVBQXZDO0FBQ0EsTUFBTUMsd0JBQXdCLEdBQUcsS0FBSyxDQUF0QztBQUNBLE1BQU1DLFdBQVcsR0FBRyxPQUFwQjs7QUFDQSxNQUFN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Q0QsR0FGRCxDQUVFLE9BQU9tQixDQUFQLEVBQVU7QUFDVixVQUFNc0IsZ0JBQWdCLENBQUNoQyxTQUFqQixDQUEyQixJQUEzQixDQUFOO0FBQ0EsVUFBTWdDLGdCQUFnQixDQUFDbEIsT0FBakIsRUFBTjtBQUNBLFVBQU1KLENBQU47QUFDRDs7QUFDRCxPQUFLYyxlQUFMLEdBQXVCUSxnQkFBdkI7QUFDRCxDQS9DRDs7QUEyREFoRCxRQUFRLENBQUNxRCxjQUFULEdBQTBCLGVBQWVBLGNBQWYsR0FBaUM7QUFDekQsTUFBSSxDQUFDLEtBQUtiLGVBQVYsRUFBMkI7QUFDekIxQixvQkFBSUQsSUFBSixDQUFTLDBFQUFUOztBQUNBLFdBQU8sRUFBUDtBQUNEOztBQUVELE1BQUlULFVBQUo7O0FBQ0EsTUFBSTtBQUNGQSxJQUFBQSxVQUFVLEdBQUcsTUFBTSxLQUFLb0MsZUFBTCxDQUFxQlgsTUFBckIsRUFBbkI7O0FBQ0EsUUFBSSxFQUFDLE1BQU1FLGtCQUFHQyxNQUFILENBQVU1QixVQUFWLENBQVAsQ0FBSixFQUFrQztBQUNoQ1Usc0JBQUl1QixhQUFKLENBQW1CLGlEQUFELEdBQ2YsMkNBQTBDakMsVUFBVyxHQUR4RDtBQUVEO0FBQ0YsR0FORCxDQU1FLE9BQU9zQixDQUFQLEVBQVU7QUFDVixVQUFNLEtBQUtjLGVBQUwsQ0FBcUJ4QixTQUFyQixDQUErQixJQUEvQixDQUFOO0FBQ0EsVUFBTSxLQUFLd0IsZUFBTCxDQUFxQlYsT0FBckIsRUFBTjtBQUNBLFNBQUtVLGVBQUwsR0FBdUIsSUFBdkI7QUFDQSxVQUFNZCxDQUFOO0FBQ0Q7O0FBQ0QsU0FBTyxNQUFNLGlDQUFxQnRCLFVBQXJCLENBQWI7QUFDRCxDQXBCRDs7ZUF1QmVKLFEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHlpZGV2aWNlIGZyb20gJy4uL3B5LWlvcy1kZXZpY2UtY2xpZW50JztcbmltcG9ydCB7IGZzLCB0ZW1wRGlyLCBsb2dnZXIsIHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyBlbmNvZGVCYXNlNjRPclVwbG9hZCB9IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgTUFYX0NBUFRVUkVfVElNRV9TRUMgPSA2MCAqIDYwICogMTI7XG5jb25zdCBERUZBVUxUX0NBUFRVUkVfVElNRV9TRUMgPSA2MCAqIDU7XG5jb25zdCBERUZBVUxUX0VYVCA9ICcucGNhcCc7XG5jb25zdCBwY2FwTG9nZ2VyID0gbG9nZ2VyLmdldExvZ2dlcigncGNhcGQnKTtcblxuY29uc3QgY29tbWFuZHMgPSB7fTtcblxuXG5jbGFzcyBUcmFmZmljQ2FwdHVyZSB7XG4gIGNvbnN0cnVjdG9yICh1ZGlkLCByZXN1bHRQYXRoKSB7XG4gICAgdGhpcy51ZGlkID0gdWRpZDtcbiAgICB0aGlzLnJlc3VsdFBhdGggPSByZXN1bHRQYXRoO1xuICAgIHRoaXMubWFpblByb2Nlc3MgPSBudWxsO1xuICB9XG5cbiAgYXN5bmMgc3RhcnQgKHRpbWVvdXRTZWNvbmRzKSB7XG4gICAgdGhpcy5tYWluUHJvY2VzcyA9IGF3YWl0IG5ldyBQeWlkZXZpY2UodGhpcy51ZGlkKS5jb2xsZWN0UGNhcCh0aGlzLnJlc3VsdFBhdGgpO1xuICAgIHRoaXMubWFpblByb2Nlc3Mub24oJ291dHB1dCcsIChzdGRvdXQsIHN0ZGVycikgPT4ge1xuICAgICAgaWYgKHN0ZGVycikge1xuICAgICAgICBwY2FwTG9nZ2VyLmluZm8oYCR7c3RkZXJyfWApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGxvZy5pbmZvKGBTdGFydGluZyBuZXR3b3JrIHRyYWZmaWMgY2FwdHVyZSBzZXNzaW9uIG9uIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfScuIGAgK1xuICAgICAgYFdpbGwgdGltZW91dCBpbiAke3RpbWVvdXRTZWNvbmRzfXNgKTtcbiAgICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IGF3YWl0IHRoaXMuaW50ZXJydXB0KCksIHRpbWVvdXRTZWNvbmRzICogMTAwMCk7XG4gICAgdGhpcy5tYWluUHJvY2Vzcy5vbmNlKCdleGl0JywgKGNvZGUsIHNpZ25hbCkgPT4ge1xuICAgICAgbG9nLmRlYnVnKGBUaGUgdHJhZmZpYyBjYXB0dXJlIHNlc3Npb24gb24gdGhlIGRldmljZSAnJHt0aGlzLnVkaWR9JyBoYXMgZXhpdGVkIGAgK1xuICAgICAgICBgd2l0aCBjb2RlICR7Y29kZX0sIHNpZ25hbCAke3NpZ25hbH1gKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzQ2FwdHVyaW5nICgpIHtcbiAgICByZXR1cm4gISEodGhpcy5tYWluUHJvY2Vzcz8uaXNSdW5uaW5nKTtcbiAgfVxuXG4gIGFzeW5jIGludGVycnVwdCAoZm9yY2UgPSBmYWxzZSkge1xuICAgIGlmICh0aGlzLmlzQ2FwdHVyaW5nKCkpIHtcbiAgICAgIGNvbnN0IGludGVycnVwdFByb21pc2UgPSB0aGlzLm1haW5Qcm9jZXNzLnN0b3AoZm9yY2UgPyAnU0lHVEVSTScgOiAnU0lHSU5UJyk7XG4gICAgICB0aGlzLm1haW5Qcm9jZXNzID0gbnVsbDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGludGVycnVwdFByb21pc2U7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZy53YXJuKGBDYW5ub3QgJHtmb3JjZSA/ICd0ZXJtaW5hdGUnIDogJ2ludGVycnVwdCd9IHRoZSB0cmFmZmljIGNhcHR1cmUgc2Vzc2lvbi4gYCArXG4gICAgICAgICAgYE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYXN5bmMgZmluaXNoICgpIHtcbiAgICBhd2FpdCB0aGlzLmludGVycnVwdCgpO1xuICAgIHJldHVybiB0aGlzLnJlc3VsdFBhdGg7XG4gIH1cblxuICBhc3luYyBjbGVhbnVwICgpIHtcbiAgICBpZiAoYXdhaXQgZnMuZXhpc3RzKHRoaXMucmVzdWx0UGF0aCkpIHtcbiAgICAgIGF3YWl0IGZzLnJpbXJhZih0aGlzLnJlc3VsdFBhdGgpO1xuICAgIH1cbiAgfVxufVxuXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU3RhcnRDYXB0dXJlT3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ3xudW1iZXJ9IHRpbWVMaW1pdFNlYyBbMTgwXSAtIFRoZSBtYXhpbXVtIHRyYWZmaWMgY2FwdHVyZSB0aW1lLCBpbiBzZWNvbmRzLlxuICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgMTgwLCB0aGUgbWF4aW11bSB2YWx1ZSBpcyA0MzIwMCAoMTIgaG91cnMpLlxuICogQHByb3BlcnR5IHs/Ym9vbGVhbn0gZm9yY2VSZXN0YXJ0IFtmYWxzZV0gLSBXaGV0aGVyIHRvIHJlc3RhcnQgYXVkaW8gY2FwdHVyZSBwcm9jZXNzIGZvcmNlZnVsbHkgd2hlblxuICogc3RhcnRQY2FwIGlzIGNhbGxlZCAoYHRydWVgKSBvciBpZ25vcmUgdGhlIGNhbGwgdW50aWwgdGhlIGN1cnJlbnQgbmV0d29yayB0cmFmZmljIGNhcHR1cmUgaXMgY29tcGxldGVkLlxuICovXG5cbi8qKlxuICogUmVjb3JkcyB0aGUgZ2l2ZW4gbmV0d29yayB0cmFmZmljIGNhcHR1cmUgaW50byBhIC5wY2FwIGZpbGUuXG4gKlxuICogQHBhcmFtIHs/U3RhcnRDYXB0dXJlT3B0aW9uc30gb3B0aW9ucyAtIFRoZSBhdmFpbGFibGUgb3B0aW9ucy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBuZXR3b3JrIHRyYWZmaWMgY2FwdHVyZSBoYXMgZmFpbGVkIHRvIHN0YXJ0LlxuICovXG5jb21tYW5kcy5tb2JpbGVTdGFydFBjYXAgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVTdGFydFBjYXAgKG9wdGlvbnMgPSB7fSkge1xuICBpZiAodGhpcy5pc1NpbXVsYXRvcigpKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coJ05ldHdvcmsgdHJhZmZpYyBjYXB0dXJlIG9ubHkgd29ya3Mgb24gcmVhbCBkZXZpY2VzJyk7XG4gIH1cblxuICBjb25zdCB7XG4gICAgdGltZUxpbWl0U2VjID0gREVGQVVMVF9DQVBUVVJFX1RJTUVfU0VDLFxuICAgIGZvcmNlUmVzdGFydCxcbiAgfSA9IG9wdGlvbnM7XG5cbiAgaWYgKHRoaXMuX3RyYWZmaWNDYXB0dXJlPy5pc0NhcHR1cmluZygpKSB7XG4gICAgbG9nLmluZm8oYFRoZXJlIGlzIGFuIGFjdGl2ZSB0cmFmZmljIGNhcHR1cmUgcHJvY2Vzc2ApO1xuICAgIGlmIChmb3JjZVJlc3RhcnQpIHtcbiAgICAgIGxvZy5pbmZvKGBTdG9wcGluZyBpdCBiZWNhdXNlICdmb3JjZVJlc3RhcnQnIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZWApO1xuICAgICAgYXdhaXQgdGhpcy5fdHJhZmZpY0NhcHR1cmUuaW50ZXJydXB0KHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2cuaW5mbyhgRG9pbmcgbm90aGluZy4gYCArXG4gICAgICAgIGBTZXQgJ2ZvcmNlUmVzdGFydCcgb3B0aW9uIHRvIHRydWUgaWYgeW91J2QgbGlrZSB0byBzdGFydCBhIG5ldyB0cmFmZmljIGNhcHR1cmUgc2Vzc2lvbmApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAodGhpcy5fdHJhZmZpY0NhcHR1cmUpIHtcbiAgICBhd2FpdCB0aGlzLl90cmFmZmljQ2FwdHVyZS5jbGVhbnVwKCk7XG4gICAgdGhpcy5fdHJhZmZpY0NhcHR1cmUgPSBudWxsO1xuICB9XG5cbiAgY29uc3QgcmVzdWx0UGF0aCA9IGF3YWl0IHRlbXBEaXIucGF0aCh7XG4gICAgcHJlZml4OiBgYXBwaXVtXyR7dXRpbC51dWlkVjQoKS5zdWJzdHJpbmcoMCwgOCl9YCxcbiAgICBzdWZmaXg6IERFRkFVTFRfRVhULFxuICB9KTtcblxuICBjb25zdCB0cmFmZmljQ29sbGVjdG9yID0gbmV3IFRyYWZmaWNDYXB0dXJlKHRoaXMub3B0cy5kZXZpY2UudWRpZCwgcmVzdWx0UGF0aCk7XG5cbiAgY29uc3QgdGltZW91dFNlY29uZHMgPSBwYXJzZUludCh0aW1lTGltaXRTZWMsIDEwKTtcbiAgaWYgKGlzTmFOKHRpbWVvdXRTZWNvbmRzKSB8fCB0aW1lb3V0U2Vjb25kcyA+IE1BWF9DQVBUVVJFX1RJTUVfU0VDIHx8IHRpbWVvdXRTZWNvbmRzIDw9IDApIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgVGhlIHRpbWVMaW1pdFNlYyB2YWx1ZSBtdXN0IGJlIGluIHJhbmdlIFsxLCAke01BWF9DQVBUVVJFX1RJTUVfU0VDfV0gc2Vjb25kcy4gYCArXG4gICAgICBgVGhlIHZhbHVlIG9mICcke3RpbWVMaW1pdFNlY30nIGhhcyBiZWVuIHBhc3NlZCBpbnN0ZWFkLmApO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBhd2FpdCB0cmFmZmljQ29sbGVjdG9yLnN0YXJ0KHRpbWVvdXRTZWNvbmRzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGF3YWl0IHRyYWZmaWNDb2xsZWN0b3IuaW50ZXJydXB0KHRydWUpO1xuICAgIGF3YWl0IHRyYWZmaWNDb2xsZWN0b3IuY2xlYW51cCgpO1xuICAgIHRocm93IGU7XG4gIH1cbiAgdGhpcy5fdHJhZmZpY0NhcHR1cmUgPSB0cmFmZmljQ29sbGVjdG9yO1xufTtcblxuLyoqXG4gKiBTdG9wIGNhcHR1cmUgb2YgdGhlIGRldmljZSBuZXR3b3JrIHRyYWZmaWMuIElmIG5vIHRyYWZmaWMgY2FwdHVyZSBwcm9jZXNzIGlzIHJ1bm5pbmcgdGhlblxuICogdGhlIGVuZHBvaW50IHdpbGwgdHJ5IHRvIGdldCB0aGUgcmVjZW50bHkgcmVjb3JkZWQgZmlsZS5cbiAqIElmIG5vIHByZXZpb3VzbHkgcmVjb3JkZWQgZmlsZSBpcyBmb3VuZCBhbmQgbm8gYWN0aXZlIHRyYWZmaWMgY2FwdHVyZVxuICogcHJvY2Vzc2VzIGFyZSBydW5uaW5nIHRoZW4gdGhlIG1ldGhvZCByZXR1cm5zIGFuIGVtcHR5IHN0cmluZy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBCYXNlNjQtZW5jb2RlZCBjb250ZW50IG9mIHRoZSByZWNvcmRlZCBwY2FwIGZpbGUgb3IgYW5cbiAqIGVtcHR5IHN0cmluZyBpZiBubyB0cmFmZmljIGNhcHR1cmUgaGFzIGJlZW4gc3RhcnRlZCBiZWZvcmUuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGdldHRpbmcgdGhlIGNhcHR1cmUgZmlsZS5cbiAqL1xuY29tbWFuZHMubW9iaWxlU3RvcFBjYXAgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVTdG9wUGNhcCAoKSB7XG4gIGlmICghdGhpcy5fdHJhZmZpY0NhcHR1cmUpIHtcbiAgICBsb2cuaW5mbygnTmV0d29yayB0cmFmZmljIGNvbGxlY3RvciBoYXMgbm90IGJlZW4gc3RhcnRlZC4gVGhlcmUgaXMgbm90aGluZyB0byBzdG9wJyk7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgbGV0IHJlc3VsdFBhdGg7XG4gIHRyeSB7XG4gICAgcmVzdWx0UGF0aCA9IGF3YWl0IHRoaXMuX3RyYWZmaWNDYXB0dXJlLmZpbmlzaCgpO1xuICAgIGlmICghYXdhaXQgZnMuZXhpc3RzKHJlc3VsdFBhdGgpKSB7XG4gICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgVGhlIG5ldHdvcmsgdHJhZmZpYyBjYXB0dXJlIHV0aWxpdHkgaGFzIGZhaWxlZCBgICtcbiAgICAgICAgYHRvIHN0b3JlIHRoZSBhY3R1YWwgdHJhZmZpYyBjYXB0dXJlIGF0ICcke3Jlc3VsdFBhdGh9J2ApO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGF3YWl0IHRoaXMuX3RyYWZmaWNDYXB0dXJlLmludGVycnVwdCh0cnVlKTtcbiAgICBhd2FpdCB0aGlzLl90cmFmZmljQ2FwdHVyZS5jbGVhbnVwKCk7XG4gICAgdGhpcy5fdHJhZmZpY0NhcHR1cmUgPSBudWxsO1xuICAgIHRocm93IGU7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IGVuY29kZUJhc2U2NE9yVXBsb2FkKHJlc3VsdFBhdGgpO1xufTtcblxuZXhwb3J0IHsgY29tbWFuZHMgfTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvcGNhcC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
