"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Pyidevice = void 0;

require("source-map-support/register");

var _teen_process = require("teen_process");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("./logger"));

var _path = _interopRequireDefault(require("path"));

const BINARY_NAME = 'pyidevice';

class Pyidevice {
  constructor(udid) {
    this.udid = udid;
    this.binaryPath = null;
  }

  async assertExists(isStrict = true) {
    if (this.binaryPath) {
      return true;
    }

    try {
      this.binaryPath = await _appiumSupport.fs.which(BINARY_NAME);
      return true;
    } catch (e) {
      if (isStrict) {
        throw new Error(`${BINARY_NAME} binary cannot be found in PATH. ` + `Please make sure it is installed. Visit https://github.com/YueChen-C/py-ios-device for ` + `more details.`);
      }

      return false;
    }
  }

  async execute(args, opts = {}) {
    await this.assertExists();
    const {
      cwd,
      format = 'json',
      logStdout = false,
      asynchronous = false
    } = opts;
    const finalArgs = [...args, '--udid', this.udid];

    if (format) {
      finalArgs.push('--format', format);
    }

    const cmdStr = _appiumSupport.util.quote([this.binaryPath, ...finalArgs]);

    _logger.default.debug(`Executing ${cmdStr}`);

    try {
      if (asynchronous) {
        const result = new _teen_process.SubProcess(this.binaryPath, finalArgs, {
          cwd
        });
        await result.start(0);
        return result;
      }

      const result = await (0, _teen_process.exec)(this.binaryPath, finalArgs, {
        cwd
      });

      if (logStdout) {
        _logger.default.debug(`Command output: ${result.stdout}`);
      }

      return result;
    } catch (e) {
      throw new Error(`'${cmdStr}' failed. Original error: ${e.stderr || e.stdout || e.message}`);
    }
  }

  async listProfiles() {
    const {
      stdout
    } = await this.execute(['profiles', 'list']);
    return JSON.parse(stdout);
  }

  async installProfile({
    profilePath,
    payload
  } = {}) {
    if (!profilePath && !payload) {
      throw new Error('Either the full path to the profile or its payload must be provided');
    }

    let tmpRoot;
    let srcPath = profilePath;

    try {
      if (!srcPath) {
        tmpRoot = await _appiumSupport.tempDir.openDir();
        srcPath = _path.default.join(tmpRoot, 'cert.pem');
        await _appiumSupport.fs.writeFile(srcPath, payload, 'utf8');
      }

      await this.execute(['profiles', 'install', '--path', srcPath], {
        logStdout: true
      });
    } finally {
      if (tmpRoot) {
        await _appiumSupport.fs.rimraf(tmpRoot);
      }
    }
  }

  async removeProfile(name) {
    await this.execute(['profiles', 'remove', name], {
      logStdout: true
    });
  }

  async listCrashes() {
    const {
      stdout
    } = await this.execute(['crash', 'list']);
    return JSON.parse(stdout.replace(/'/g, '"')).filter(x => !['.', '..'].includes(x));
  }

  async exportCrash(name, dstFolder) {
    await this.execute(['crash', 'export', '--name', name], {
      logStdout: true,
      cwd: dstFolder
    });
  }

  async collectPcap(dstFile) {
    return await this.execute(['pcapd', dstFile], {
      format: null,
      asynchronous: true
    });
  }

}

exports.Pyidevice = Pyidevice;
var _default = Pyidevice;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
