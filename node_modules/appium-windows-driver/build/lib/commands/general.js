"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

async function getScreenSize() {
  const dimensions = await this.execPowerShell({
    command: 'Add-Type -AssemblyName System.Windows.Forms;[System.Windows.Forms.Screen]::PrimaryScreen.Bounds.Size'
  });

  _logger.default.debug(`Screen size information retrieved: ${dimensions}`);

  const match = /^\s*(True|False)\s+(\d+)\s+(\d+)/m.exec(dimensions);

  if (!match) {
    throw new Error('Cannot retrieve the screen size. Check the server log for more details');
  }

  return {
    width: parseInt(match[2], 10),
    height: parseInt(match[3], 10)
  };
}

const commands = {};
exports.commands = commands;

commands.getWindowSize = async function getWindowSize() {
  const size = await this.winAppDriver.sendCommand('/window/size', 'GET');

  if (_lodash.default.isPlainObject(size)) {
    return size;
  }

  _logger.default.info('Cannot retrieve window size from WinAppDriver');

  _logger.default.info('Falling back to Windows Forms to calculate dimensions');

  return await getScreenSize();
};

commands.getWindowRect = async function getWindowRect() {
  const {
    width,
    height
  } = await this.getWindowSize();
  return {
    x: 0,
    y: 0,
    width,
    height
  };
};

commands.setWindowRect = async function setWindowRect(x, y, width, height) {
  await this.winAppDriver.sendCommand('/window/size', 'POST', {
    width,
    height
  });
};

commands.getScreenshot = async function getScreenshot() {
  return await this.winAppDriver.sendCommand('/screenshot', 'GET');
};

commands.getElementRect = async function getElementRect(el) {
  const elId = _appiumSupport.util.unwrapElement(el);

  const {
    x,
    y
  } = await this.winAppDriver.sendCommand(`/element/${elId}/location`, 'GET');
  const {
    width,
    height
  } = await this.winAppDriver.sendCommand(`/element/${elId}/size`, 'GET');
  return {
    x,
    y,
    width,
    height
  };
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZW5lcmFsLmpzIl0sIm5hbWVzIjpbImdldFNjcmVlblNpemUiLCJkaW1lbnNpb25zIiwiZXhlY1Bvd2VyU2hlbGwiLCJjb21tYW5kIiwibG9nIiwiZGVidWciLCJtYXRjaCIsImV4ZWMiLCJFcnJvciIsIndpZHRoIiwicGFyc2VJbnQiLCJoZWlnaHQiLCJjb21tYW5kcyIsImdldFdpbmRvd1NpemUiLCJzaXplIiwid2luQXBwRHJpdmVyIiwic2VuZENvbW1hbmQiLCJfIiwiaXNQbGFpbk9iamVjdCIsImluZm8iLCJnZXRXaW5kb3dSZWN0IiwieCIsInkiLCJzZXRXaW5kb3dSZWN0IiwiZ2V0U2NyZWVuc2hvdCIsImdldEVsZW1lbnRSZWN0IiwiZWwiLCJlbElkIiwidXRpbCIsInVud3JhcEVsZW1lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUEsZUFBZUEsYUFBZixHQUFnQztBQUM5QixRQUFNQyxVQUFVLEdBQUcsTUFBTSxLQUFLQyxjQUFMLENBQW9CO0FBQzNDQyxJQUFBQSxPQUFPLEVBQUU7QUFEa0MsR0FBcEIsQ0FBekI7O0FBR0FDLGtCQUFJQyxLQUFKLENBQVcsc0NBQXFDSixVQUFXLEVBQTNEOztBQUNBLFFBQU1LLEtBQUssR0FBRyxvQ0FBb0NDLElBQXBDLENBQXlDTixVQUF6QyxDQUFkOztBQUNBLE1BQUksQ0FBQ0ssS0FBTCxFQUFZO0FBQ1YsVUFBTSxJQUFJRSxLQUFKLENBQVUsd0VBQVYsQ0FBTjtBQUNEOztBQUNELFNBQU87QUFDTEMsSUFBQUEsS0FBSyxFQUFFQyxRQUFRLENBQUNKLEtBQUssQ0FBQyxDQUFELENBQU4sRUFBVyxFQUFYLENBRFY7QUFFTEssSUFBQUEsTUFBTSxFQUFFRCxRQUFRLENBQUNKLEtBQUssQ0FBQyxDQUFELENBQU4sRUFBVyxFQUFYO0FBRlgsR0FBUDtBQUlEOztBQUVELE1BQU1NLFFBQVEsR0FBRyxFQUFqQjs7O0FBSUFBLFFBQVEsQ0FBQ0MsYUFBVCxHQUF5QixlQUFlQSxhQUFmLEdBQWdDO0FBQ3ZELFFBQU1DLElBQUksR0FBRyxNQUFNLEtBQUtDLFlBQUwsQ0FBa0JDLFdBQWxCLENBQThCLGNBQTlCLEVBQThDLEtBQTlDLENBQW5COztBQUNBLE1BQUlDLGdCQUFFQyxhQUFGLENBQWdCSixJQUFoQixDQUFKLEVBQTJCO0FBQ3pCLFdBQU9BLElBQVA7QUFDRDs7QUFFRFYsa0JBQUllLElBQUosQ0FBUywrQ0FBVDs7QUFDQWYsa0JBQUllLElBQUosQ0FBUyx1REFBVDs7QUFDQSxTQUFPLE1BQU1uQixhQUFhLEVBQTFCO0FBQ0QsQ0FURDs7QUFZQVksUUFBUSxDQUFDUSxhQUFULEdBQXlCLGVBQWVBLGFBQWYsR0FBZ0M7QUFDdkQsUUFBTTtBQUFDWCxJQUFBQSxLQUFEO0FBQVFFLElBQUFBO0FBQVIsTUFBa0IsTUFBTSxLQUFLRSxhQUFMLEVBQTlCO0FBQ0EsU0FBTztBQUFDUSxJQUFBQSxDQUFDLEVBQUUsQ0FBSjtBQUFPQyxJQUFBQSxDQUFDLEVBQUUsQ0FBVjtBQUFhYixJQUFBQSxLQUFiO0FBQW9CRSxJQUFBQTtBQUFwQixHQUFQO0FBQ0QsQ0FIRDs7QUFNQUMsUUFBUSxDQUFDVyxhQUFULEdBQXlCLGVBQWVBLGFBQWYsQ0FBOEJGLENBQTlCLEVBQWlDQyxDQUFqQyxFQUFvQ2IsS0FBcEMsRUFBMkNFLE1BQTNDLEVBQW1EO0FBQzFFLFFBQU0sS0FBS0ksWUFBTCxDQUFrQkMsV0FBbEIsQ0FBOEIsY0FBOUIsRUFBOEMsTUFBOUMsRUFBc0Q7QUFBQ1AsSUFBQUEsS0FBRDtBQUFRRSxJQUFBQTtBQUFSLEdBQXRELENBQU47QUFDRCxDQUZEOztBQUlBQyxRQUFRLENBQUNZLGFBQVQsR0FBeUIsZUFBZUEsYUFBZixHQUFnQztBQUN2RCxTQUFPLE1BQU0sS0FBS1QsWUFBTCxDQUFrQkMsV0FBbEIsQ0FBOEIsYUFBOUIsRUFBNkMsS0FBN0MsQ0FBYjtBQUNELENBRkQ7O0FBS0FKLFFBQVEsQ0FBQ2EsY0FBVCxHQUEwQixlQUFlQSxjQUFmLENBQStCQyxFQUEvQixFQUFtQztBQUMzRCxRQUFNQyxJQUFJLEdBQUdDLG9CQUFLQyxhQUFMLENBQW1CSCxFQUFuQixDQUFiOztBQUNBLFFBQU07QUFBQ0wsSUFBQUEsQ0FBRDtBQUFJQyxJQUFBQTtBQUFKLE1BQVMsTUFBTSxLQUFLUCxZQUFMLENBQWtCQyxXQUFsQixDQUErQixZQUFXVyxJQUFLLFdBQS9DLEVBQTJELEtBQTNELENBQXJCO0FBQ0EsUUFBTTtBQUFDbEIsSUFBQUEsS0FBRDtBQUFRRSxJQUFBQTtBQUFSLE1BQWtCLE1BQU0sS0FBS0ksWUFBTCxDQUFrQkMsV0FBbEIsQ0FBK0IsWUFBV1csSUFBSyxPQUEvQyxFQUF1RCxLQUF2RCxDQUE5QjtBQUNBLFNBQU87QUFBQ04sSUFBQUEsQ0FBRDtBQUFJQyxJQUFBQSxDQUFKO0FBQU9iLElBQUFBLEtBQVA7QUFBY0UsSUFBQUE7QUFBZCxHQUFQO0FBQ0QsQ0FMRDs7ZUFRZUMsUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRTY3JlZW5TaXplICgpIHtcbiAgY29uc3QgZGltZW5zaW9ucyA9IGF3YWl0IHRoaXMuZXhlY1Bvd2VyU2hlbGwoe1xuICAgIGNvbW1hbmQ6ICdBZGQtVHlwZSAtQXNzZW1ibHlOYW1lIFN5c3RlbS5XaW5kb3dzLkZvcm1zO1tTeXN0ZW0uV2luZG93cy5Gb3Jtcy5TY3JlZW5dOjpQcmltYXJ5U2NyZWVuLkJvdW5kcy5TaXplJyxcbiAgfSk7XG4gIGxvZy5kZWJ1ZyhgU2NyZWVuIHNpemUgaW5mb3JtYXRpb24gcmV0cmlldmVkOiAke2RpbWVuc2lvbnN9YCk7XG4gIGNvbnN0IG1hdGNoID0gL15cXHMqKFRydWV8RmFsc2UpXFxzKyhcXGQrKVxccysoXFxkKykvbS5leGVjKGRpbWVuc2lvbnMpO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcmV0cmlldmUgdGhlIHNjcmVlbiBzaXplLiBDaGVjayB0aGUgc2VydmVyIGxvZyBmb3IgbW9yZSBkZXRhaWxzJyk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogcGFyc2VJbnQobWF0Y2hbMl0sIDEwKSxcbiAgICBoZWlnaHQ6IHBhcnNlSW50KG1hdGNoWzNdLCAxMCksXG4gIH07XG59XG5cbmNvbnN0IGNvbW1hbmRzID0ge307XG5cbi8vIFRoZSBuZXh0IHR3byBjb21tYW5kcyBhcmUgcmVxdWlyZWRcbi8vIGZvciBwcm9wZXIgYC1pbWFnZWAgbG9jYXRvciBmdW5jdGlvbmFsaXR5XG5jb21tYW5kcy5nZXRXaW5kb3dTaXplID0gYXN5bmMgZnVuY3Rpb24gZ2V0V2luZG93U2l6ZSAoKSB7XG4gIGNvbnN0IHNpemUgPSBhd2FpdCB0aGlzLndpbkFwcERyaXZlci5zZW5kQ29tbWFuZCgnL3dpbmRvdy9zaXplJywgJ0dFVCcpO1xuICBpZiAoXy5pc1BsYWluT2JqZWN0KHNpemUpKSB7XG4gICAgcmV0dXJuIHNpemU7XG4gIH1cbiAgLy8gd29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9XaW5BcHBEcml2ZXIvaXNzdWVzLzExMDRcbiAgbG9nLmluZm8oJ0Nhbm5vdCByZXRyaWV2ZSB3aW5kb3cgc2l6ZSBmcm9tIFdpbkFwcERyaXZlcicpO1xuICBsb2cuaW5mbygnRmFsbGluZyBiYWNrIHRvIFdpbmRvd3MgRm9ybXMgdG8gY2FsY3VsYXRlIGRpbWVuc2lvbnMnKTtcbiAgcmV0dXJuIGF3YWl0IGdldFNjcmVlblNpemUoKTtcbn07XG5cbi8vIGEgd29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9hcHBpdW0vaXNzdWVzLzE1OTIzXG5jb21tYW5kcy5nZXRXaW5kb3dSZWN0ID0gYXN5bmMgZnVuY3Rpb24gZ2V0V2luZG93UmVjdCAoKSB7XG4gIGNvbnN0IHt3aWR0aCwgaGVpZ2h0fSA9IGF3YWl0IHRoaXMuZ2V0V2luZG93U2l6ZSgpO1xuICByZXR1cm4ge3g6IDAsIHk6IDAsIHdpZHRoLCBoZWlnaHR9O1xufTtcblxuLy8gYSB3b3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL2FwcGl1bS9pc3N1ZXMvMTU5MjNcbmNvbW1hbmRzLnNldFdpbmRvd1JlY3QgPSBhc3luYyBmdW5jdGlvbiBzZXRXaW5kb3dSZWN0ICh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gIGF3YWl0IHRoaXMud2luQXBwRHJpdmVyLnNlbmRDb21tYW5kKCcvd2luZG93L3NpemUnLCAnUE9TVCcsIHt3aWR0aCwgaGVpZ2h0fSk7XG59O1xuXG5jb21tYW5kcy5nZXRTY3JlZW5zaG90ID0gYXN5bmMgZnVuY3Rpb24gZ2V0U2NyZWVuc2hvdCAoKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLndpbkFwcERyaXZlci5zZW5kQ29tbWFuZCgnL3NjcmVlbnNob3QnLCAnR0VUJyk7XG59O1xuXG4vLyBhIHdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9hcHBpdW0vYXBwaXVtL2lzc3Vlcy8xNjMxNlxuY29tbWFuZHMuZ2V0RWxlbWVudFJlY3QgPSBhc3luYyBmdW5jdGlvbiBnZXRFbGVtZW50UmVjdCAoZWwpIHtcbiAgY29uc3QgZWxJZCA9IHV0aWwudW53cmFwRWxlbWVudChlbCk7XG4gIGNvbnN0IHt4LCB5fSA9IGF3YWl0IHRoaXMud2luQXBwRHJpdmVyLnNlbmRDb21tYW5kKGAvZWxlbWVudC8ke2VsSWR9L2xvY2F0aW9uYCwgJ0dFVCcpO1xuICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSBhd2FpdCB0aGlzLndpbkFwcERyaXZlci5zZW5kQ29tbWFuZChgL2VsZW1lbnQvJHtlbElkfS9zaXplYCwgJ0dFVCcpO1xuICByZXR1cm4ge3gsIHksIHdpZHRoLCBoZWlnaHR9O1xufTtcblxuZXhwb3J0IHsgY29tbWFuZHMgfTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvZ2VuZXJhbC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
