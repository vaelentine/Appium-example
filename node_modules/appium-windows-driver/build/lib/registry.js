"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseRegQueryOutput = parseRegQueryOutput;
exports.queryRegistry = queryRegistry;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

const REG = 'reg.exe';
const ENTRY_PATTERN = /^\s+(\w+)\s+([A-Z_]+)\s*(.*)/;

function parseRegEntries(root, block) {
  return _lodash.default.isEmpty(block) || _lodash.default.isEmpty(root) ? [] : block.reduce((acc, line) => {
    const match = ENTRY_PATTERN.exec(line);

    if (match) {
      acc.push({
        root,
        key: match[1],
        type: match[2],
        value: match[3] || ''
      });
    }

    return acc;
  }, []);
}

function parseRegQueryOutput(output) {
  const result = [];
  let root;
  let regEntriesBlock = [];

  for (const line of output.split('\n').map(_lodash.default.trimEnd)) {
    if (!line) {
      continue;
    }

    const curIndent = line.length - _lodash.default.trimStart(line).length;

    if (curIndent === 0) {
      result.push(...parseRegEntries(root, regEntriesBlock));
      root = line;
      regEntriesBlock = [];
    } else {
      regEntriesBlock.push(line);
    }
  }

  result.push(...parseRegEntries(root, regEntriesBlock));
  return result;
}

async function queryRegistry(root) {
  let stdout;

  try {
    ({
      stdout
    } = await (0, _teen_process.exec)(REG, ['query', root, '/s']));
  } catch (e) {
    return [];
  }

  return parseRegQueryOutput(stdout);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9yZWdpc3RyeS5qcyJdLCJuYW1lcyI6WyJSRUciLCJFTlRSWV9QQVRURVJOIiwicGFyc2VSZWdFbnRyaWVzIiwicm9vdCIsImJsb2NrIiwiXyIsImlzRW1wdHkiLCJyZWR1Y2UiLCJhY2MiLCJsaW5lIiwibWF0Y2giLCJleGVjIiwicHVzaCIsImtleSIsInR5cGUiLCJ2YWx1ZSIsInBhcnNlUmVnUXVlcnlPdXRwdXQiLCJvdXRwdXQiLCJyZXN1bHQiLCJyZWdFbnRyaWVzQmxvY2siLCJzcGxpdCIsIm1hcCIsInRyaW1FbmQiLCJjdXJJbmRlbnQiLCJsZW5ndGgiLCJ0cmltU3RhcnQiLCJxdWVyeVJlZ2lzdHJ5Iiwic3Rkb3V0IiwiZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUEsTUFBTUEsR0FBRyxHQUFHLFNBQVo7QUFDQSxNQUFNQyxhQUFhLEdBQUcsOEJBQXRCOztBQUVBLFNBQVNDLGVBQVQsQ0FBMEJDLElBQTFCLEVBQWdDQyxLQUFoQyxFQUF1QztBQUNyQyxTQUFRQyxnQkFBRUMsT0FBRixDQUFVRixLQUFWLEtBQW9CQyxnQkFBRUMsT0FBRixDQUFVSCxJQUFWLENBQXJCLEdBQ0gsRUFERyxHQUVIQyxLQUFLLENBQUNHLE1BQU4sQ0FBYSxDQUFDQyxHQUFELEVBQU1DLElBQU4sS0FBZTtBQUM1QixVQUFNQyxLQUFLLEdBQUdULGFBQWEsQ0FBQ1UsSUFBZCxDQUFtQkYsSUFBbkIsQ0FBZDs7QUFDQSxRQUFJQyxLQUFKLEVBQVc7QUFDVEYsTUFBQUEsR0FBRyxDQUFDSSxJQUFKLENBQVM7QUFBQ1QsUUFBQUEsSUFBRDtBQUFPVSxRQUFBQSxHQUFHLEVBQUVILEtBQUssQ0FBQyxDQUFELENBQWpCO0FBQXNCSSxRQUFBQSxJQUFJLEVBQUVKLEtBQUssQ0FBQyxDQUFELENBQWpDO0FBQXNDSyxRQUFBQSxLQUFLLEVBQUVMLEtBQUssQ0FBQyxDQUFELENBQUwsSUFBWTtBQUF6RCxPQUFUO0FBQ0Q7O0FBQ0QsV0FBT0YsR0FBUDtBQUNELEdBTkMsRUFNQyxFQU5ELENBRko7QUFTRDs7QUFFRCxTQUFTUSxtQkFBVCxDQUE4QkMsTUFBOUIsRUFBc0M7QUFDcEMsUUFBTUMsTUFBTSxHQUFHLEVBQWY7QUFDQSxNQUFJZixJQUFKO0FBQ0EsTUFBSWdCLGVBQWUsR0FBRyxFQUF0Qjs7QUFDQSxPQUFLLE1BQU1WLElBQVgsSUFBbUJRLE1BQU0sQ0FBQ0csS0FBUCxDQUFhLElBQWIsRUFBbUJDLEdBQW5CLENBQXVCaEIsZ0JBQUVpQixPQUF6QixDQUFuQixFQUFzRDtBQUNwRCxRQUFJLENBQUNiLElBQUwsRUFBVztBQUNUO0FBQ0Q7O0FBRUQsVUFBTWMsU0FBUyxHQUFHZCxJQUFJLENBQUNlLE1BQUwsR0FBY25CLGdCQUFFb0IsU0FBRixDQUFZaEIsSUFBWixFQUFrQmUsTUFBbEQ7O0FBQ0EsUUFBSUQsU0FBUyxLQUFLLENBQWxCLEVBQXFCO0FBQ25CTCxNQUFBQSxNQUFNLENBQUNOLElBQVAsQ0FBWSxHQUFHVixlQUFlLENBQUNDLElBQUQsRUFBT2dCLGVBQVAsQ0FBOUI7QUFDQWhCLE1BQUFBLElBQUksR0FBR00sSUFBUDtBQUNBVSxNQUFBQSxlQUFlLEdBQUcsRUFBbEI7QUFDRCxLQUpELE1BSU87QUFDTEEsTUFBQUEsZUFBZSxDQUFDUCxJQUFoQixDQUFxQkgsSUFBckI7QUFDRDtBQUNGOztBQUNEUyxFQUFBQSxNQUFNLENBQUNOLElBQVAsQ0FBWSxHQUFHVixlQUFlLENBQUNDLElBQUQsRUFBT2dCLGVBQVAsQ0FBOUI7QUFDQSxTQUFPRCxNQUFQO0FBQ0Q7O0FBdUJELGVBQWVRLGFBQWYsQ0FBOEJ2QixJQUE5QixFQUFvQztBQUNsQyxNQUFJd0IsTUFBSjs7QUFDQSxNQUFJO0FBQ0YsS0FBQztBQUFDQSxNQUFBQTtBQUFELFFBQVcsTUFBTSx3QkFBSzNCLEdBQUwsRUFBVSxDQUFDLE9BQUQsRUFBVUcsSUFBVixFQUFnQixJQUFoQixDQUFWLENBQWxCO0FBQ0QsR0FGRCxDQUVFLE9BQU95QixDQUFQLEVBQVU7QUFDVixXQUFPLEVBQVA7QUFDRDs7QUFDRCxTQUFPWixtQkFBbUIsQ0FBQ1csTUFBRCxDQUExQjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuXG5jb25zdCBSRUcgPSAncmVnLmV4ZSc7XG5jb25zdCBFTlRSWV9QQVRURVJOID0gL15cXHMrKFxcdyspXFxzKyhbQS1aX10rKVxccyooLiopLztcblxuZnVuY3Rpb24gcGFyc2VSZWdFbnRyaWVzIChyb290LCBibG9jaykge1xuICByZXR1cm4gKF8uaXNFbXB0eShibG9jaykgfHwgXy5pc0VtcHR5KHJvb3QpKVxuICAgID8gW11cbiAgICA6IGJsb2NrLnJlZHVjZSgoYWNjLCBsaW5lKSA9PiB7XG4gICAgICBjb25zdCBtYXRjaCA9IEVOVFJZX1BBVFRFUk4uZXhlYyhsaW5lKTtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBhY2MucHVzaCh7cm9vdCwga2V5OiBtYXRjaFsxXSwgdHlwZTogbWF0Y2hbMl0sIHZhbHVlOiBtYXRjaFszXSB8fCAnJ30pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlUmVnUXVlcnlPdXRwdXQgKG91dHB1dCkge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgbGV0IHJvb3Q7XG4gIGxldCByZWdFbnRyaWVzQmxvY2sgPSBbXTtcbiAgZm9yIChjb25zdCBsaW5lIG9mIG91dHB1dC5zcGxpdCgnXFxuJykubWFwKF8udHJpbUVuZCkpIHtcbiAgICBpZiAoIWxpbmUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGN1ckluZGVudCA9IGxpbmUubGVuZ3RoIC0gXy50cmltU3RhcnQobGluZSkubGVuZ3RoO1xuICAgIGlmIChjdXJJbmRlbnQgPT09IDApIHtcbiAgICAgIHJlc3VsdC5wdXNoKC4uLnBhcnNlUmVnRW50cmllcyhyb290LCByZWdFbnRyaWVzQmxvY2spKTtcbiAgICAgIHJvb3QgPSBsaW5lO1xuICAgICAgcmVnRW50cmllc0Jsb2NrID0gW107XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZ0VudHJpZXNCbG9jay5wdXNoKGxpbmUpO1xuICAgIH1cbiAgfVxuICByZXN1bHQucHVzaCguLi5wYXJzZVJlZ0VudHJpZXMocm9vdCwgcmVnRW50cmllc0Jsb2NrKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQHR5cGVkZWYgT2JqZWN0IFJlZ0VudHJ5XG4gKiBAcHJvcGVydHkge3N0cmluZ30gcm9vdCBGdWxsIHBhdGggdG8gdGhlIHJlZ2lzdHJ5IGJyYW5jaCwgZm9yIGV4YW1wbGVcbiAqIEhLRVlfTE9DQUxfTUFDSElORVxcU09GVFdBUkVcXE1pY3Jvc29mdFxcV2luZG93c1xcQ3VycmVudFZlcnNpb25cXFVuaW5zdGFsbFxcRGlyZWN0RHJhd0V4XG4gKiBAcHJvcGVydHkge3N0cmluZ30ga2V5IFRoZSByZWdpc3RyeSBrZXkgbmFtZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgT25lIG9mIHBvc3NpYmxlIHJlZ2lzdHJ5IHZhbHVlIHR5cGVzLCBmb3IgZXhhbXBsZVxuICogUkVHX0RXT1JEIG9yIFJFR19TWlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHZhbHVlIFRoZSBhY3R1YWwgdmFsdWUuIENvdWxkIGJlIGVtcHR5XG4gKi9cblxuLyoqXG4gKiBMaXN0cyByZWdpc3RyeSB0cmVlIChlLmcuIHJlY3Vyc2l2ZWx5KSB1bmRlciB0aGUgZ2l2ZW4gcm9vdCBub2RlLlxuICogVGhlIGxvb2t1cCBpcyBkb25lIHVuZGVyIHRoZSBzYW1lIHJlZ2lzdHJ5IGJyYW5jaCB0aGF0IHRoZSBjdXJyZW50IHByb2Nlc3NcbiAqIHN5c3RlbSBhcmNoaXRlY3R1cmUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJvb3QgVGhlIHJlZ2lzdHJ5IGtleSBuYW1lLCB3aGljaCBjb25zaXN0cyBvZiB0d28gcGFydHM6XG4gKiAtIFRoZSByb290IGtleTogSEtMTSB8IEhLQ1UgfCBIS0NSIHwgSEtVIHwgSEtDQ1xuICogLSBUaGUgc3Via2V5IHVuZGVyIHRoZSBzZWxlY3RlZCByb290IGtleSwgZm9yIGV4YW1wbGUgXFxTb2Z0d2FyZVxcTWljcm9zb2Z0XG4gKiBAcmV0dXJucyB7UmVnRW50cnlbXX0gTGlzdCBvZiBtYXRjaGVkIFJlZ0VudHJ5IGluc3RhbmNlcyBvciBhbiBlbXB0eSBsaXN0XG4gKiBpZiBlaXRoZXIgbm8gZW50cmllcyB3ZXJlIGZvdW5kIHVuZGVyIHRoZSBnaXZlbiByb290IG9yIHRoZSByb290IGRvZXMgbm90IGV4aXN0LlxuICovXG5hc3luYyBmdW5jdGlvbiBxdWVyeVJlZ2lzdHJ5IChyb290KSB7XG4gIGxldCBzdGRvdXQ7XG4gIHRyeSB7XG4gICAgKHtzdGRvdXR9ID0gYXdhaXQgZXhlYyhSRUcsIFsncXVlcnknLCByb290LCAnL3MnXSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHJldHVybiBwYXJzZVJlZ1F1ZXJ5T3V0cHV0KHN0ZG91dCk7XG59XG5cbmV4cG9ydCB7IHF1ZXJ5UmVnaXN0cnksIHBhcnNlUmVnUXVlcnlPdXRwdXQgfTsiXSwiZmlsZSI6ImxpYi9yZWdpc3RyeS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
