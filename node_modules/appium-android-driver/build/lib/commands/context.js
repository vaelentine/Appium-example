"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.setupNewChromedriver = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

var _appiumChromedriver = _interopRequireDefault(require("appium-chromedriver"));

var _portfinder = _interopRequireDefault(require("portfinder"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _appiumBaseDriver = require("appium-base-driver");

var _webviewHelpers = _interopRequireWildcard(require("../webview-helpers"));

var _androidHelpers = require("../android-helpers");

const CHROMEDRIVER_AUTODOWNLOAD_FEATURE = 'chromedriver_autodownload';
let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.getCurrentContext = async function getCurrentContext() {
  return this.curContext || this.defaultContextName();
};

commands.getContexts = async function getContexts() {
  const opts = Object.assign({
    isChromeSession: this.isChromeSession
  }, this.opts);
  const webviewsMapping = await _webviewHelpers.default.getWebViewsMapping(this.adb, opts);
  return this.assignContexts(webviewsMapping);
};

commands.setContext = async function setContext(name) {
  if (!_appiumSupport.util.hasValue(name)) {
    name = this.defaultContextName();
  } else if (name === _webviewHelpers.WEBVIEW_WIN) {
    name = this.defaultWebviewName();
  }

  if (name === this.curContext) {
    return;
  }

  const opts = Object.assign({
    isChromeSession: this.isChromeSession
  }, this.opts);
  const webviewsMapping = await _webviewHelpers.default.getWebViewsMapping(this.adb, opts);
  const contexts = this.assignContexts(webviewsMapping);

  if (!_lodash.default.includes(contexts, name)) {
    throw new _appiumBaseDriver.errors.NoSuchContextError();
  }

  await this.switchContext(name, webviewsMapping);
  this.curContext = name;
};

commands.mobileGetContexts = async function mobileGetContexts() {
  const opts = {
    androidDeviceSocket: this.opts.androidDeviceSocket,
    ensureWebviewsHavePages: true,
    webviewDevtoolsPort: this.opts.webviewDevtoolsPort,
    enableWebviewDetailsCollection: true,
    isChromeSession: this.isChromeSession
  };
  return await _webviewHelpers.default.getWebViewsMapping(this.adb, opts);
};

helpers.assignContexts = function assignContexts(webviewsMapping) {
  const opts = Object.assign({
    isChromeSession: this.isChromeSession
  }, this.opts);

  const webviews = _webviewHelpers.default.parseWebviewNames(webviewsMapping, opts);

  this.contexts = [_webviewHelpers.NATIVE_WIN, ...webviews];

  _logger.default.debug(`Available contexts: ${JSON.stringify(this.contexts)}`);

  return this.contexts;
};

helpers.switchContext = async function switchContext(name, webviewsMapping) {
  if (this.isChromedriverContext(name)) {
    await this.startChromedriverProxy(name, webviewsMapping);
  } else if (this.isChromedriverContext(this.curContext)) {
    if (this.opts.recreateChromeDriverSessions) {
      _logger.default.debug('recreateChromeDriverSessions set to true; killing existing chromedrivers');

      await this.stopChromedriverProxies();
    } else {
      await this.suspendChromedriverProxy();
    }
  } else {
    throw new Error(`Didn't know how to handle switching to context '${name}'`);
  }
};

helpers.defaultContextName = function defaultContextName() {
  return _webviewHelpers.NATIVE_WIN;
};

helpers.defaultWebviewName = function defaultWebviewName() {
  return _webviewHelpers.WEBVIEW_BASE + this.opts.appPackage;
};

helpers.isWebContext = function isWebContext() {
  return this.curContext !== null && this.curContext !== _webviewHelpers.NATIVE_WIN;
};

helpers.startChromedriverProxy = async function startChromedriverProxy(context, webviewsMapping) {
  _logger.default.debug(`Connecting to chrome-backed webview context '${context}'`);

  let cd;

  if (this.sessionChromedrivers[context]) {
    _logger.default.debug(`Found existing Chromedriver for context '${context}'. Using it.`);

    cd = this.sessionChromedrivers[context];
    await setupExistingChromedriver(cd);
  } else {
    let opts = _lodash.default.cloneDeep(this.opts);

    opts.chromeUseRunningApp = true;

    if (opts.extractChromeAndroidPackageFromContextName || context === `${_webviewHelpers.WEBVIEW_BASE}chrome`) {
      let androidPackage = context.match(`${_webviewHelpers.WEBVIEW_BASE}(.+)`);

      if (androidPackage && androidPackage.length > 0) {
        opts.chromeAndroidPackage = androidPackage[1];
      }

      if (!opts.extractChromeAndroidPackageFromContextName) {
        if (_lodash.default.has(this.opts, 'enableWebviewDetailsCollection') && !this.opts.enableWebviewDetailsCollection) {
          const contexts = webviewsMapping.map(wm => wm.webviewName);

          for (const knownPackage of _webviewHelpers.KNOWN_CHROME_PACKAGE_NAMES) {
            if (_lodash.default.includes(contexts, `${_webviewHelpers.WEBVIEW_BASE}${knownPackage}`)) {
              continue;
            }

            const appState = await this.queryAppState(knownPackage);

            if (_lodash.default.includes([_androidHelpers.APP_STATE.RUNNING_IN_BACKGROUND, _androidHelpers.APP_STATE.RUNNING_IN_FOREGROUND], appState)) {
              opts.chromeAndroidPackage = knownPackage;

              _logger.default.debug(`Identified chromeAndroidPackage as '${opts.chromeAndroidPackage}' ` + `for context '${context}' by querying states of Chrome app packages`);

              break;
            }
          }
        } else {
          for (const wm of webviewsMapping) {
            if (wm.webviewName === context && _lodash.default.has(wm === null || wm === void 0 ? void 0 : wm.info, 'Android-Package')) {
              opts.chromeAndroidPackage = wm.info['Android-Package'];

              _logger.default.debug(`Identified chromeAndroidPackage as '${opts.chromeAndroidPackage}' ` + `for context '${context}' by CDP`);

              break;
            }
          }
        }
      }
    }

    cd = await this.setupNewChromedriver(opts, this.adb.curDeviceId, this.adb, context);
    cd.on(_appiumChromedriver.default.EVENT_CHANGED, msg => {
      if (msg.state === _appiumChromedriver.default.STATE_STOPPED) {
        this.onChromedriverStop(context);
      }
    });
    this.sessionChromedrivers[context] = cd;
  }

  this.chromedriver = cd;
  this.proxyReqRes = this.chromedriver.proxyReq.bind(this.chromedriver);
  this.proxyCommand = this.chromedriver.jwproxy.command.bind(this.chromedriver.jwproxy);
  this.jwpProxyActive = true;
};

helpers.suspendChromedriverProxy = function suspendChromedriverProxy() {
  this.chromedriver = null;
  this.proxyReqRes = null;
  this.proxyCommand = null;
  this.jwpProxyActive = false;
};

helpers.onChromedriverStop = async function onChromedriverStop(context) {
  _logger.default.warn(`Chromedriver for context ${context} stopped unexpectedly`);

  if (context === this.curContext) {
    let err = new Error('Chromedriver quit unexpectedly during session');
    await this.startUnexpectedShutdown(err);
  } else {
    _logger.default.warn("Chromedriver quit unexpectedly, but it wasn't the active " + 'context, ignoring');

    delete this.sessionChromedrivers[context];
  }
};

helpers.stopChromedriverProxies = async function stopChromedriverProxies() {
  this.suspendChromedriverProxy();

  for (let context of _lodash.default.keys(this.sessionChromedrivers)) {
    let cd = this.sessionChromedrivers[context];

    _logger.default.debug(`Stopping chromedriver for context ${context}`);

    cd.removeAllListeners(_appiumChromedriver.default.EVENT_CHANGED);

    try {
      await cd.stop();
    } catch (err) {
      _logger.default.warn(`Error stopping Chromedriver: ${err.message}`);
    }

    delete this.sessionChromedrivers[context];
  }
};

helpers.isChromedriverContext = function isChromedriverContext(viewName) {
  return _lodash.default.includes(viewName, _webviewHelpers.WEBVIEW_WIN) || viewName === _webviewHelpers.CHROMIUM_WIN;
};

helpers.shouldDismissChromeWelcome = function shouldDismissChromeWelcome() {
  return !!this.opts.chromeOptions && _lodash.default.isArray(this.opts.chromeOptions.args) && this.opts.chromeOptions.args.includes('--no-first-run');
};

helpers.dismissChromeWelcome = async function dismissChromeWelcome() {
  _logger.default.info('Trying to dismiss Chrome welcome');

  let activity = await this.getCurrentActivity();

  if (activity !== 'org.chromium.chrome.browser.firstrun.FirstRunActivity') {
    _logger.default.info('Chrome welcome dialog never showed up! Continuing');

    return;
  }

  let el = await this.findElOrEls('id', 'com.android.chrome:id/terms_accept', false);
  await this.click(el.ELEMENT);

  try {
    let el = await this.findElOrEls('id', 'com.android.chrome:id/negative_button', false);
    await this.click(el.ELEMENT);
  } catch (e) {
    _logger.default.warn(`This device did not show Chrome SignIn dialog, ${e.message}`);
  }
};

helpers.startChromeSession = async function startChromeSession() {
  _logger.default.info('Starting a chrome-based browser session');

  let opts = _lodash.default.cloneDeep(this.opts);

  const knownPackages = ['org.chromium.chrome.shell', 'com.android.chrome', 'com.chrome.beta', 'org.chromium.chrome', 'org.chromium.webview_shell'];

  if (_lodash.default.includes(knownPackages, this.opts.appPackage)) {
    opts.chromeBundleId = this.opts.appPackage;
  } else {
    opts.chromeAndroidActivity = this.opts.appActivity;
  }

  this.chromedriver = await this.setupNewChromedriver(opts, this.adb.curDeviceId, this.adb);
  this.chromedriver.on(_appiumChromedriver.default.EVENT_CHANGED, msg => {
    if (msg.state === _appiumChromedriver.default.STATE_STOPPED) {
      this.onChromedriverStop(_webviewHelpers.CHROMIUM_WIN);
    }
  });
  this.curContext = _webviewHelpers.CHROMIUM_WIN;
  this.sessionChromedrivers[_webviewHelpers.CHROMIUM_WIN] = this.chromedriver;
  this.proxyReqRes = this.chromedriver.proxyReq.bind(this.chromedriver);
  this.proxyCommand = this.chromedriver.jwproxy.command.bind(this.chromedriver.jwproxy);
  this.jwpProxyActive = true;

  if (this.shouldDismissChromeWelcome()) {
    await this.dismissChromeWelcome();
  }
};

async function setupExistingChromedriver(chromedriver) {
  if (!(await chromedriver.hasWorkingWebview())) {
    _logger.default.debug('ChromeDriver is not associated with a window. ' + 'Re-initializing the session.');

    await chromedriver.restart();
  }

  return chromedriver;
}

async function getChromedriverPort(portSpec) {
  const getPort = _bluebird.default.promisify(_portfinder.default.getPort, {
    context: _portfinder.default
  });

  if (!portSpec) {
    const port = await getPort();

    _logger.default.debug(`A port was not given, using random free port: ${port}`);

    return port;
  }

  _logger.default.debug(`Finding a free port for chromedriver using spec ${JSON.stringify(portSpec)}`);

  let foundPort = null;

  for (const potentialPort of portSpec) {
    let port, stopPort;

    if (_lodash.default.isArray(potentialPort)) {
      [port, stopPort] = potentialPort;
    } else {
      port = parseInt(potentialPort, 10);
      stopPort = port;
    }

    try {
      _logger.default.debug(`Checking port range ${port}:${stopPort}`);

      foundPort = await getPort({
        port,
        stopPort
      });
      break;
    } catch (e) {
      _logger.default.debug(`Nothing in port range ${port}:${stopPort} was available`);
    }
  }

  if (foundPort === null) {
    throw new Error(`Could not find a free port for chromedriver using ` + `chromedriverPorts spec ${JSON.stringify(portSpec)}`);
  }

  _logger.default.debug(`Using free port ${foundPort} for chromedriver`);

  return foundPort;
}

helpers.isChromedriverAutodownloadEnabled = function isChromedriverAutodownloadEnabled() {
  if (this.isFeatureEnabled(CHROMEDRIVER_AUTODOWNLOAD_FEATURE)) {
    return true;
  }

  _logger.default.debug(`Automated Chromedriver download is disabled. ` + `Use '${CHROMEDRIVER_AUTODOWNLOAD_FEATURE}' server feature to enable it`);

  return false;
};

helpers.setupNewChromedriver = async function setupNewChromedriver(opts, curDeviceId, adb, context = null) {
  if (opts.chromeDriverPort) {
    _logger.default.warn(`The 'chromeDriverPort' capability is deprecated. Please use 'chromedriverPort' instead`);

    opts.chromedriverPort = opts.chromeDriverPort;
  }

  if (opts.chromedriverPort) {
    _logger.default.debug(`Using user-specified port ${opts.chromedriverPort} for chromedriver`);
  } else {
    opts.chromedriverPort = await getChromedriverPort(opts.chromedriverPorts);
  }

  const details = context ? _webviewHelpers.default.getWebviewDetails(adb, context) : undefined;

  if (!_lodash.default.isEmpty(details)) {
    _logger.default.debug('Passing web view details to the Chromedriver constructor: ' + JSON.stringify(details, null, 2));
  }

  const chromedriver = new _appiumChromedriver.default({
    port: opts.chromedriverPort,
    executable: opts.chromedriverExecutable,
    adb,
    cmdArgs: opts.chromedriverArgs,
    verbose: !!opts.showChromedriverLog,
    executableDir: opts.chromedriverExecutableDir,
    mappingPath: opts.chromedriverChromeMappingFile,
    bundleId: opts.chromeBundleId,
    useSystemExecutable: opts.chromedriverUseSystemExecutable,
    disableBuildCheck: opts.chromedriverDisableBuildCheck,
    details,
    isAutodownloadEnabled: (this || {}).isChromedriverAutodownloadEnabled ? this.isChromedriverAutodownloadEnabled() : undefined
  });
  opts.chromeOptions = opts.chromeOptions || {};

  for (const opt of _lodash.default.keys(opts)) {
    if (opt.endsWith(':chromeOptions')) {
      _logger.default.warn(`Merging '${opt}' into 'chromeOptions'. This may cause unexpected behavior`);

      _lodash.default.merge(opts.chromeOptions, opts[opt]);
    }
  }

  const caps = _webviewHelpers.default.createChromedriverCaps(opts, curDeviceId, details);

  _logger.default.debug(`Before starting chromedriver, androidPackage is '${caps.chromeOptions.androidPackage}'`);

  await chromedriver.start(caps);
  return chromedriver;
};

const setupNewChromedriver = helpers.setupNewChromedriver;
exports.setupNewChromedriver = setupNewChromedriver;
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
