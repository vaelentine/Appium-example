"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NETWORK_KEYS = exports.BATTERY_KEYS = exports.MEMORY_KEYS = exports.CPU_KEYS = exports.SUPPORTED_PERFORMANCE_DATA_TYPES = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("../logger"));

const commands = {},
      helpers = {},
      extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const NETWORK_KEYS = [['bucketStart', 'activeTime', 'rxBytes', 'rxPackets', 'txBytes', 'txPackets', 'operations', 'bucketDuration'], ['st', 'activeTime', 'rb', 'rp', 'tb', 'tp', 'op', 'bucketDuration']];
exports.NETWORK_KEYS = NETWORK_KEYS;
const CPU_KEYS = ['user', 'kernel'];
exports.CPU_KEYS = CPU_KEYS;
const BATTERY_KEYS = ['power'];
exports.BATTERY_KEYS = BATTERY_KEYS;
const MEMORY_KEYS = ['totalPrivateDirty', 'nativePrivateDirty', 'dalvikPrivateDirty', 'eglPrivateDirty', 'glPrivateDirty', 'totalPss', 'nativePss', 'dalvikPss', 'eglPss', 'glPss', 'nativeHeapAllocatedSize', 'nativeHeapSize', 'nativeRss', 'dalvikRss', 'totalRss'];
exports.MEMORY_KEYS = MEMORY_KEYS;
const SUPPORTED_PERFORMANCE_DATA_TYPES = Object.freeze({
  cpuinfo: 'the amount of cpu by user and kernel process - cpu information for applications on real devices and simulators',
  memoryinfo: 'the amount of memory used by the process - memory information for applications on real devices and simulators',
  batteryinfo: 'the remaining battery power - battery power information for applications on real devices and simulators',
  networkinfo: 'the network statistics - network rx/tx information for applications on real devices and simulators'
});
exports.SUPPORTED_PERFORMANCE_DATA_TYPES = SUPPORTED_PERFORMANCE_DATA_TYPES;
const MEMINFO_TITLES = Object.freeze({
  NATIVE: 'Native',
  DALVIK: 'Dalvik',
  EGL: 'EGL',
  GL: 'GL',
  MTRACK: 'mtrack',
  TOTAL: 'TOTAL',
  HEAP: 'Heap'
});
const RETRY_PAUSE_MS = 1000;

function parseMeminfoForApi19To29(entries, valDict) {
  const [type, subType] = entries;

  if (type === MEMINFO_TITLES.NATIVE && subType === MEMINFO_TITLES.HEAP) {
    [,, valDict.nativePss, valDict.nativePrivateDirty,,, valDict.nativeHeapSize, valDict.nativeHeapAllocatedSize] = entries;
  } else if (type === MEMINFO_TITLES.DALVIK && subType === MEMINFO_TITLES.HEAP) {
    [,, valDict.dalvikPss, valDict.dalvikPrivateDirty] = entries;
  } else if (type === MEMINFO_TITLES.EGL && subType === MEMINFO_TITLES.MTRACK) {
    [,, valDict.eglPss, valDict.eglPrivateDirty] = entries;
  } else if (type === MEMINFO_TITLES.GL && subType === MEMINFO_TITLES.MTRACK) {
    [,, valDict.glPss, valDict.glPrivateDirty] = entries;
  } else if (type === MEMINFO_TITLES.TOTAL && entries.length === 8) {
    [, valDict.totalPss, valDict.totalPrivateDirty] = entries;
  }
}

function parseMeminfoForApiBelow19(entries, valDict) {
  const type = entries[0];

  if (type === MEMINFO_TITLES.NATIVE) {
    [, valDict.nativePss,, valDict.nativePrivateDirty, valDict.nativeHeapSize, valDict.nativeHeapAllocatedSize] = entries;
  } else if (type === MEMINFO_TITLES.DALVIK) {
    [, valDict.dalvikPss,, valDict.dalvikPrivateDirty] = entries;
  } else if (type === MEMINFO_TITLES.EGL) {
    [, valDict.eglPss,, valDict.eglPrivateDirty] = entries;
  } else if (type === MEMINFO_TITLES.GL) {
    [, valDict.glPss,, valDict.glPrivateDirty] = entries;
  } else if (type === MEMINFO_TITLES.TOTAL) {
    [, valDict.totalPss,, valDict.totalPrivateDirty] = entries;
  }
}

function parseMeminfoForApiAbove29(entries, valDict) {
  const [type, subType] = entries;

  if (type === MEMINFO_TITLES.NATIVE && subType === MEMINFO_TITLES.HEAP) {
    [,, valDict.nativePss, valDict.nativePrivateDirty,,, valDict.nativeRss, valDict.nativeHeapSize, valDict.nativeHeapAllocatedSize] = entries;
  } else if (type === MEMINFO_TITLES.DALVIK && subType === MEMINFO_TITLES.HEAP) {
    [,, valDict.dalvikPss, valDict.dalvikPrivateDirty,,, valDict.dalvikRss] = entries;
  } else if (type === MEMINFO_TITLES.EGL && subType === MEMINFO_TITLES.MTRACK) {
    [,, valDict.eglPss, valDict.eglPrivateDirty] = entries;
  } else if (type === MEMINFO_TITLES.GL && subType === MEMINFO_TITLES.MTRACK) {
    [,, valDict.glPss, valDict.glPrivateDirty] = entries;
  } else if (type === MEMINFO_TITLES.TOTAL && entries.length === 9) {
    [, valDict.totalPss, valDict.totalPrivateDirty,,, valDict.totalRss] = entries;
  }
}

commands.getPerformanceDataTypes = function getPerformanceDataTypes() {
  return _lodash.default.keys(SUPPORTED_PERFORMANCE_DATA_TYPES);
};

commands.getPerformanceData = async function getPerformanceData(packageName, dataType, retries = 2) {
  switch (_lodash.default.toLower(dataType)) {
    case 'batteryinfo':
      return await this.getBatteryInfo(retries);

    case 'cpuinfo':
      return await this.getCPUInfo(packageName, retries);

    case 'memoryinfo':
      return await this.getMemoryInfo(packageName, retries);

    case 'networkinfo':
      return await this.getNetworkTrafficInfo(retries);

    default:
      throw new Error(`No performance data of type '${dataType}' found. ` + `Only the following values are supported: ${JSON.stringify(SUPPORTED_PERFORMANCE_DATA_TYPES, ' ', 2)}`);
  }
};

helpers.getCPUInfo = async function getCPUInfo(packageName, retries = 2) {
  return await (0, _asyncbox.retryInterval)(retries, RETRY_PAUSE_MS, async () => {
    let output;

    try {
      output = await this.adb.shell(['dumpsys', 'cpuinfo']);
    } catch (e) {
      if (e.stderr) {
        _logger.default.info(e.stderr);
      }

      throw e;
    }

    const usagesPattern = new RegExp(`^.+\\/${_lodash.default.escapeRegExp(packageName)}:\\D+([\\d.]+)%\\s+user\\s+\\+\\s+([\\d.]+)%\\s+kernel`, 'm');
    const match = usagesPattern.exec(output);

    if (!match) {
      _logger.default.debug(output);

      throw new Error(`Unable to parse cpu usage data for '${packageName}'. Check the server log for more details`);
    }

    return [CPU_KEYS, [match[1], match[2]]];
  });
};

helpers.getBatteryInfo = async function getBatteryInfo(retries = 2) {
  return await (0, _asyncbox.retryInterval)(retries, RETRY_PAUSE_MS, async () => {
    let cmd = ['dumpsys', 'battery', '|', 'grep', 'level'];
    let data = await this.adb.shell(cmd);
    if (!data) throw new Error('No data from dumpsys');
    let power = parseInt((data.split(':')[1] || '').trim(), 10);

    if (!Number.isNaN(power)) {
      return [_lodash.default.clone(BATTERY_KEYS), [power.toString()]];
    } else {
      throw new Error(`Unable to parse battery data: '${data}'`);
    }
  });
};

helpers.getMemoryInfo = async function getMemoryInfo(packageName, retries = 2) {
  return await (0, _asyncbox.retryInterval)(retries, RETRY_PAUSE_MS, async () => {
    const cmd = ['dumpsys', 'meminfo', `'${packageName}'`, '|', 'grep', '-E', `'${MEMINFO_TITLES.NATIVE}|${MEMINFO_TITLES.DALVIK}|${MEMINFO_TITLES.EGL}` + `|${MEMINFO_TITLES.GL}|${MEMINFO_TITLES.TOTAL}'`];
    const data = await this.adb.shell(cmd);

    if (!data) {
      throw new Error('No data from dumpsys');
    }

    const valDict = {
      totalPrivateDirty: ''
    };
    const apiLevel = await this.adb.getApiLevel();

    for (const line of data.split('\n')) {
      const entries = line.trim().split(/\s+/).filter(Boolean);

      if (apiLevel >= 30) {
        parseMeminfoForApiAbove29(entries, valDict);
      } else if (apiLevel > 18 && apiLevel < 30) {
        parseMeminfoForApi19To29(entries, valDict);
      } else {
        parseMeminfoForApiBelow19(entries, valDict);
      }
    }

    if (valDict.totalPrivateDirty && valDict.totalPrivateDirty !== 'nodex') {
      const headers = _lodash.default.clone(MEMORY_KEYS);

      const values = headers.map(header => valDict[header]);
      return [headers, values];
    }

    throw new Error(`Unable to parse memory data: '${data}'`);
  });
};

helpers.getNetworkTrafficInfo = async function getNetworkTrafficInfo(retries = 2) {
  return await (0, _asyncbox.retryInterval)(retries, RETRY_PAUSE_MS, async () => {
    let returnValue = [];
    let bucketDuration, bucketStart, activeTime, rxBytes, rxPackets, txBytes, txPackets, operations;
    let cmd = ['dumpsys', 'netstats'];
    let data = await this.adb.shell(cmd);
    if (!data) throw new Error('No data from dumpsys');
    let index = 0;
    let fromXtstats = data.indexOf('Xt stats:');
    let start = data.indexOf('Pending bytes:', fromXtstats);
    let delimiter = data.indexOf(':', start + 1);
    let end = data.indexOf('\n', delimiter + 1);
    let pendingBytes = data.substring(delimiter + 1, end).trim();

    if (end > delimiter) {
      start = data.indexOf('bucketDuration', end + 1);
      delimiter = data.indexOf('=', start + 1);
      end = data.indexOf('\n', delimiter + 1);
      bucketDuration = data.substring(delimiter + 1, end).trim();
    }

    if (start >= 0) {
      data = data.substring(end + 1, data.length);
      let arrayList = data.split('\n');

      if (arrayList.length > 0) {
        start = -1;

        for (let j = 0; j < NETWORK_KEYS.length; ++j) {
          start = arrayList[0].indexOf(NETWORK_KEYS[j][0]);

          if (start >= 0) {
            index = j;
            returnValue[0] = [];

            for (let k = 0; k < NETWORK_KEYS[j].length; ++k) {
              returnValue[0][k] = NETWORK_KEYS[j][k];
            }

            break;
          }
        }

        let returnIndex = 1;

        for (let i = 0; i < arrayList.length; i++) {
          data = arrayList[i];
          start = data.indexOf(NETWORK_KEYS[index][0]);

          if (start >= 0) {
            delimiter = data.indexOf('=', start + 1);
            end = data.indexOf(' ', delimiter + 1);
            bucketStart = data.substring(delimiter + 1, end).trim();

            if (end > delimiter) {
              start = data.indexOf(NETWORK_KEYS[index][1], end + 1);

              if (start >= 0) {
                delimiter = data.indexOf('=', start + 1);
                end = data.indexOf(' ', delimiter + 1);
                activeTime = data.substring(delimiter + 1, end).trim();
              }
            }

            if (end > delimiter) {
              start = data.indexOf(NETWORK_KEYS[index][2], end + 1);

              if (start >= 0) {
                delimiter = data.indexOf('=', start + 1);
                end = data.indexOf(' ', delimiter + 1);
                rxBytes = data.substring(delimiter + 1, end).trim();
              }
            }

            if (end > delimiter) {
              start = data.indexOf(NETWORK_KEYS[index][3], end + 1);

              if (start >= 0) {
                delimiter = data.indexOf('=', start + 1);
                end = data.indexOf(' ', delimiter + 1);
                rxPackets = data.substring(delimiter + 1, end).trim();
              }
            }

            if (end > delimiter) {
              start = data.indexOf(NETWORK_KEYS[index][4], end + 1);

              if (start >= 0) {
                delimiter = data.indexOf('=', start + 1);
                end = data.indexOf(' ', delimiter + 1);
                txBytes = data.substring(delimiter + 1, end).trim();
              }
            }

            if (end > delimiter) {
              start = data.indexOf(NETWORK_KEYS[index][5], end + 1);

              if (start >= 0) {
                delimiter = data.indexOf('=', start + 1);
                end = data.indexOf(' ', delimiter + 1);
                txPackets = data.substring(delimiter + 1, end).trim();
              }
            }

            if (end > delimiter) {
              start = data.indexOf(NETWORK_KEYS[index][6], end + 1);

              if (start >= 0) {
                delimiter = data.indexOf('=', start + 1);
                end = data.length;
                operations = data.substring(delimiter + 1, end).trim();
              }
            }

            returnValue[returnIndex++] = [bucketStart, activeTime, rxBytes, rxPackets, txBytes, txPackets, operations, bucketDuration];
          }
        }
      }
    }

    if (!_lodash.default.isEqual(pendingBytes, '') && !_lodash.default.isUndefined(pendingBytes) && !_lodash.default.isEqual(pendingBytes, 'nodex')) {
      return returnValue;
    } else {
      throw new Error(`Unable to parse network traffic data: '${data}'`);
    }
  });
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
